// <copyright file="Result.cs" company="Drastic Actions">
// Copyright (c) Drastic Actions. All rights reserved.
// </copyright>

namespace Awful.Core.Entities.Web
{
    /// <summary>
    /// The SA WebClient Result.
    /// </summary>
    public class Result
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Result"/> class.
        /// </summary>
        /// <param name="httpRequestIsSuccess">Http Request Success.</param>
        /// <param name="text">The text of the request.</param>
        /// <param name="endpoint">The endpoint that was hit.</param>
        /// <param name="errorHtml">Error Html.</param>
        /// <param name="onProbationText">On Probation Text.</param>
        public Result(bool httpRequestIsSuccess, string text, string endpoint, string errorHtml = "", string onProbationText = "")
        {
            this.HttpRequestSuccess = httpRequestIsSuccess;
            this.ResultText = text;
            this.AbsoluteEndpoint = endpoint;
            this.OnProbationText = onProbationText;
            this.ErrorText = errorHtml;
        }

        /// <summary>
        /// Gets the result of the request.
        /// </summary>
        public string ResultText { get; }

        /// <summary>
        /// Gets the error text.
        /// If it exists in the resulting HTML.
        /// </summary>
        public string? ErrorText { get; }

        /// <summary>
        /// Gets a value indicating whether the user is on probation.
        /// </summary>
        public bool OnProbation => !string.IsNullOrEmpty(this.OnProbationText);

        /// <summary>
        /// Gets the On Probation text, generated by SA in HTML.
        /// </summary>
        public string? OnProbationText { get; }

        /// <summary>
        /// Gets the Uri of the request.
        /// </summary>
        public string AbsoluteEndpoint { get; }

        /// <summary>
        /// Gets a value indicating whether the HTTP success.
        /// </summary>
        public bool HttpRequestSuccess { get; }

        /// <summary>
        /// Gets a value indicating whether the request is successful.
        /// We base this on if there is error text from the request,
        /// as sometimes SA returns 200s even when it errored.
        /// </summary>
        public bool IsSuccess => string.IsNullOrEmpty(this.ErrorText);
    }
}
